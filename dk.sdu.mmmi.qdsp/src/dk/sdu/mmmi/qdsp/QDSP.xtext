grammar dk.sdu.mmmi.qdsp.QDSP with org.eclipse.xtext.common.Terminals

generate qDSP "http://www.sdu.dk/mmmi/qdsp/QDSP"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	(settings = Settings)?
	elements	+= Element*
;

Element:
	qInstruction | Constant | Variable | Define
;

Settings:
	name = 'config''{' settings += Setting* '}'
;
Setting:
	ProjectTitle | HeapSize | ProgramMemorySize | RuntimeProgrammable | AutoCommentQDSPCode | ProgramingControlAddress |
	ProgramingStatusAddress | ProgramingDataInAddress | ProgramingDataOutAddress | EnableOptimization | SHInterfaceType
;

ProjectTitle:
	name = 'ProjectTitle' '=' val = ID
;
HeapSize:
	name = 'HeapSize' '=' val = INT
;
ProgramMemorySize:
	name = 'ProgramMemorySize' '=' val = INT
;
RuntimeProgrammable:
	name = 'RuntimeProgrammable' '=' val = Boolean
;
AutoCommentQDSPCode:
	name = 'AutoCommentQDSPCode' '=' val = Boolean
;
ProgramingControlAddress:
	name = 'ProgramingControlAddress' '=' val = INT
;
ProgramingStatusAddress:
	name = 'ProgramingStatusAddress' '=' val = INT
;
ProgramingDataInAddress:
	name = 'ProgramingDataInAddress' '=' val = INT
;
ProgramingDataOutAddress:
	name = 'ProgramingDataOutAddress' '=' val = INT
;
EnableOptimization:
	name = 'EnableOptimization' '=' val = Boolean
;
SHInterfaceType:
	name = 'SHInterfaceType' '=' val = ('Unity-Link' | 'uTosNet')
;


ResType:
	Variable | Define | Address
;

Datatype:
	MathType | Define | Address 
;

MathType:
	Constant | Variable | MyNumber
;
MathFunc:
	FuncTrunctate16 | FuncMin | FuncMax | FuncPare | Address
;
FuncLoop:
	FuncWhile | FuncDo | FuncFor
;
FuncBranch:
	FuncIf | FuncSwitch
;
OtherFunc:
	FuncSleep | FuncLoader | FuncLoop | FuncBranch
;
Function:
	MathFunc | OtherFunc
;
HeapElement:
	Constant | Variable
;

Variable:
	'var' name = ID ('=' math = MyMath)? 
;
Define:
	'define' name = ID value = Address
;
Constant:
	'const' name = ID '=' value = Integer 
;

incInstruction:
	variable = [Variable] type = ('++'|'--')
;

qdInstruction:
	((res2 = Address | res = [ResType] | (res = [Address] add = ('+'|'-'|'*'))) '=' value = MyMath) | inc = incInstruction
;

qInstruction:
	func = OtherFunc | inst = qdInstruction
;
FuncSleep:
	func = ('sleep') '(' value = INT ')' 
;
FuncTrunctate16:
	func = ('trunctate16') '(' value = MyMath ')'
;
FuncMin:
	func = ('min') '(' val1 = MyMath ',' (val2 = [MathType] | val2n = MyNumber) ')'
;
FuncMax:
	func = ('max') '(' val1 = MyMath ',' (val2 = [MathType] | val2n = MyNumber) ')'
;
FuncPare:
	'parenthesis'? func = '(' value = MyMath ')'
;
FuncLoader:
	func = ('runBootLoader') '(' ')' 
;

FuncWhile:
	func = ('while') '(' bool = MyBoolean ')''{'
		instructions += qInstruction*
	'}'
;
FuncDo:
	func = ('do') '{'
		instructions += qInstruction*
	'}''while''(' bool = MyBoolean ')'
;
FuncFor:
	func = ('for') '(' (insts1 = qdInstruction)? ';' bool = MyBoolean ';' (insts2 = qdInstruction)? ')''{'
		instructions += qInstruction*
	'}'
;

FuncIf:
	func = ('if') '(' bool = MyBoolean ')''{'
		insts1 += qInstruction*
	'}' 
	elseifs += MyElseIf*
	(else = 'else' '{'
		insts3 += qInstruction*
	'}')?
;
FuncSwitch:
	func = ('switch')  val2 = MyMath '{'
		cases += MyCase*
		(def = 'default'':'
			insts2 += qInstruction*
			(break = 'break')?)?
	'}'
;
MyCase:
	'case' ((val = [Constant]) | (valn = MyNumber)) ':'
		insts1 += qInstruction*
		(break = 'break')?
;
MyElseIf:
	'else' 'if' '(' bool = MyBoolean ')' '{'
		insts2 += qInstruction*
	'}'
;
MyMath:
	(val = [Datatype] | valn = MyNumber | valf = MathFunc) operations += Operation*
;

Operation:
	(operator = ('+'|'-'|'*') (val = [Datatype] | valn = MyNumber| valf = MathFunc)) | (operator = ('/'|'<<'|'>>') valn = MyNumber)
;

Address: 
	chanel = ('SH'|'IO') '[' address = INT ']'
;

MyNumber:
	value = Integer
;
MyBoolean:
	(val1 = Boolean) | (val2 = MyMath comp = Comporator  val3 = MyMath)
;
Comporator:
	'<'|'<='|'>'|'>='|'=='|'!='
;
Integer returns ecore::EIntegerObject: 
	('+'|'-')? INT
;

Boolean returns ecore::EBoolean:
	('true' | 'false')
;

